Entire Game on One Screen

Reminds me of This Is The Only Room

Roguelike dungeon where maps can cover the entire screen including inventory status and even other maps

Pachinko
PAchinko that rearranges itself??!??!??

No, none of this.
A puzzle game! Yeah!

There are a set of rooms, with a bunch of mice in them.
Your objective is to get all of the mice to go, one in each room.

You have a couple of tools at your disposal.
Rooms are connected by corridors. Some corridors have doors.
It is possible to shut and open doors.

You can also control mice.
You can SCARE them, which causes all mice in the room to retreat to the farthest accessible room*.
	* If there are multiple "furthest rooms" which one do the mice go to?
	* Randomness is out. This is a puzzle game, it should be deterministic
	* Splitting them doesn't work really, if there's a remainder, what happens?
	* Player chooses. I don't like it but I guess it works.
You can SNARE them, which causes all mice which can access the current room to arrive.
You can SPLIT them, which causes mice to evenly* split into accessible rooms.
	* n mice, R rooms, (n/R go in each room, n%R stay in the original room)
	* 7 mice, 2 rooms, 3 go to each room, one stays in the original room, so 3 and 4
	* okay

Will this be fun? Who can say.
The jury's in: yes! This has the potential to be quite fun!

ROOM TYPES:
	Normal room
	Banned room: mice can pass through this room, but the puzzle cannot be solved with mice in a banned room

CORRIDOR TYPES:
	Hall: mice can travel unimpeded
	Door: player can open or close door
	Valve / Funnel: mice can only travel in one direction through. may or may not be closeable
	
This is really, really simple.

Now! Let's talk data structures.

A Room has a North, South, East, and West slot. These are each Corridors (or null).
A Corridor has a North and South, or East and West. These are both Rooms.
If you can enter a corridor it stands to reason you can exit it. Thus, corridors are either enterable or nonenterable.
R,1,0 R,0,0 H,W,1,0
Room at 1,0
Room at 0,0
Hall, pointing West from 1,0

[]=[]

R,0,0 R,1,0 F,W,1,0
Rooms as before
Funnel, pointing West from 1,0
[]-<[]
Room 1,0 has only a West corridor. It is inaccessible from all directions.
Room 0,0 has no corridors. It is accessible from East.

So a room has inputs and outputs. Maybe inputs and outputs are Rooms?

Okay, so a [][] of rooms. Rooms contain corridors, they're not present in the [][].
Halls and doors are added to both rooms.
Funnels are added only to the entry room.

So for a SCARE, we do a Dijkstra. Find the distance to all other rooms, find the max of those distances, mice go there.
For a SNARE, we do a reverse accessibility test. Run accessible? from all squares to source, true values lose their mice.
For a SPLIT, do a regular accessible? from source to all squares. Get total, divide, conquer.

Clearly the SCARE will be the most involved.

Let's work on accessible? first.
function accessible? (origin, destination) {
	for(directions)
		if(canTravel(origin, direction) || accessible?(origin + direction))
			return true;
}

function canTravel(origin, direction) {
	return (!roomAt(origin)[direction])
} 	






